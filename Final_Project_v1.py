# Import
import random
import time

#Timer: 
start_time = time.time()

#Global sound files: 

showInformation('Please choose the folder where the sound files are located: ')
folder = pickAFolder()
win = makeSound(folder + '/win.wav')
lose = makeSound(folder + '/lose.wav')
correctW = makeSound(folder + '/click.wav')
correctG = makeSound(folder + '/correctAnswer.wav')
intro = makeSound(folder + '/introduction.wav')

#Instructions
def howToPlay():
  
  printNow("=============================WELCOME TO MINDCONTROL================================\n"+   
                  
           "____________________________________RULES___________________________________________\n"+
           "The objective of the game is to break the secret code egenerated by the program in as few turns as possible.\n"+
           "The code consists of a series of random colored pegs. The player will choose the level,of difficulty easy (4 columns)\n"+
           "medium (5 columns), hard (6 columns) The user will have 10 chances to crack the secret code by attempting to duplicate\n"+
           "the exact colors and positions of the secret code. After their attempt the program will display a white, peg on the\n"+ 
           "score guide to indicate if the chosen pegs are in the correct position and the right color. A grey peg on the score guide\n"+
           "will indicate if the chosen pegs are in the correct position. If user guesses all white pegs within 10 tries they win!\n\n"+
           
           "____________________Controls________________________\n"
           "The user will input their choices consecutively using the following keys:\n"
           "R=Red, B=Blue,G=Green, W=White, Y=Yellow, P=Purple")
           
  play(intro)

#Global dictionary of colors
colors = ['R', 'G', 'B', 'W', 'Y', 'P']
grey = makeColor(150,150,150)
purple = makeColor(255, 0, 255)

#Displays the user's guesses
def fillPeg(screen, round, guess):
  row = 90 + (round - 1) * 60
  for x in range(0, len(guess)):
    if guess[x] == 'R':
      color = red
    if guess[x] == 'G':
      color = green
    if guess[x] == 'B':
      color = blue
    if guess[x] == 'W':
      color = white
    if guess[x] == 'Y':
      color = yellow
    if guess[x] == 'P':
      color = purple
    addOvalFilled(screen, 25 + x * 60, row, 40, 40, color)
    
  repaint(screen)
    
#Displays the indicator pegs
def fillSmallPeg(screen, round, scoreString, difficulty):  
  initial = 275 + (difficulty-4)*60
  row = 105 + (round - 1) * 60
  for x in range(0, len(scoreString)):
    if scoreString[x] == 'g':
      color = grey
      play(correctG)
    if scoreString[x] == 'w':
      color = white
      play(correctW)
    addOvalFilled(screen, initial + x * 30, row, 15, 15, color)
    
  repaint(screen)

#Generates a game board with 4 pegs
def layout(diff):
  screen=makeEmptyPicture(300+100*diff,800,grey)
  pegs = 3 + diff
  text = makeStyle( 'Arial', bold, 30)
  for x in range(0,pegs):
   addTextWithStyle(screen, 40+x*60, 70, str(x+1), text, white)
   for y in range(0,10):
     addOvalFilled(screen, 20+x*60, 85+y*60, 50, 50, black)
     addOvalFilled(screen, 210 + 60*diff+x*30,100+y*60, 25, 25, black)
  addLine(screen, 205+60*diff, 80, 205+60*diff, 680)
  addLine(screen, 0, 80, 600, 80)
  addLine(screen, 0,680, 600,680) 
  return screen

#Displays the master code at the bottom of the game mode
def solution(screen,masterCode):
  for x in range(0,len(masterCode)):
   for y in range(0,1):
     addOvalFilled(screen, 20+x*60,685+y*60, 50, 50, black)
     if masterCode[x] == 'R':
       addOvalFilled(screen, 25+x*60,690+y*60, 40, 40, red)
     if masterCode[x] == 'G':
       addOvalFilled(screen, 25+x*60,690+y*60, 40, 40, green)
     if masterCode[x] == 'B':
       addOvalFilled(screen, 25+x*60,690+y*60, 40, 40, blue)
     if masterCode[x] == 'W':
       addOvalFilled(screen, 25+x*60,690+y*60, 40, 40, white)
     if masterCode[x] == 'Y':
       addOvalFilled(screen, 25+x*60,690+y*60, 40, 40, yellow)
     if masterCode[x] == 'P':
       addOvalFilled(screen, 25+x*60,690+y*60, 40, 40, purple)

#Takes two parameters: secret code and guess code and returns a string containing the score
def scoreTurn(cLst, gLst):
    unusedLst = []
    scoreLst = []
    ln = len(cLst)

    for i in range(0, ln):
        unusedLst.append(gLst[i])
        scoreLst.append(cLst[i])
    
    for b1 in range(0, ln):
        if scoreLst[b1] == unusedLst[b1]:
            scoreLst[b1] = 'g'
            unusedLst[b1] = ''
            
    for w1 in range(0, ln):        
        for w2 in range(0, ln):
            if scoreLst[w1] == unusedLst[w2]:
                scoreLst[w1] = 'w'
                unusedLst[w2] = ''

    for i in range(0, 6):
        while colors[i] in scoreLst: scoreLst.remove(colors[i])   
        
    scoreLst.sort()    
       
    scoreStr = ''.join(map(str, scoreLst))
    return scoreStr

#Difficult Option
def selectDifficult():
  difficulty = 0
  acceptable = false
  
  #Determines if input is valid
  input = requestString("Please select a difficulty: \nType '1' for Easy \nType '2' for Normal \nType '3' for Hard")
  if input == '1' or input == '2' or input == '3':
    acceptable = true
    
  #While loop to continuously prompt the user to input a valid option
  while acceptable == false:
    input = requestString("Input is not valid! Please select a difficulty: \nType '1' for Easy \nType '2' for Normal \nType '3' for Hard")
    if input == '1' or input == '2' or input == '3':
      acceptable = true
  
  if input == '1':
    difficulty = 4  #EASY sets the number of beads to FOUR
  if input == '2':
    difficulty = 5  #NORMAL sets the number of beads to FIVE
  if input == '3':
    difficulty = 6  #HARD sets the number of beads to SIX
    
  return difficulty
  
#Code Generator
def generateMaster(mainCode, numBeads, colors):

  #For loop to append a random color to our main code list
  for x in range(0, numBeads):
    bead = random.randrange(0, 6, 1)
    mainCode.append(colors[bead])
    
#Determines which board to create based on difficulty
def createBoard(difficulty):
  screen = layout(difficulty-3)
  
  return screen
  
def userGuess(difficulty):
  rspdCode = []
  guessString = requestString("Input your guess for this round: ")
  
  while len(guessString) != difficulty:
    guessString = requestString("Input is invalid. Input your guess for this round: ")
    
  for char in range(0, len(guessString)):
    rspdCode.append(guessString[char].upper())
  
  return rspdCode
  
#Main Function
def masterMind():
  #Variables
  mainCode = []                    #List variable to hold master code
  rspdCode = []                    #List variable to hold user response
  numBeads = selectDifficult()     #Variable to hold number of beads in code
  round = 1
  endGame = false
  
  #Instructions
  howToPlay()
  
  #Function Calls
  generateMaster(mainCode, numBeads, colors)
  screen = createBoard(numBeads)
  show(screen)
  
  while (endGame == false):
    rspdCode = userGuess(numBeads)
    fillPeg(screen, round, rspdCode)
    indicators = scoreTurn(rspdCode, mainCode)
    fillSmallPeg(screen, round, indicators, numBeads)
    round += 1 
    
    if indicators == 'gggg' or indicators == 'ggggg' or indicators == 'gggggg':
      solution(screen, mainCode)
      repaint(screen)
      play(win)
      endGame = true
      elapsed_time = time.time() - start_time
      showInformation('You won!! It took you %.2f' % elapsed_time + ' seconds to complete!')
    elif(round > 10 and indicators != 'gggg') or (round > 10 and indicators != 'ggggg') or (round > 10 and indicators != 'gggggg'):
      solution(screen, mainCode)
      repaint(screen)
      play(lose)
      endGame = true
      elapsed_time = time.time() - start_time
      showInformation('You lost! It took you %.2f' % elapsed_time + ' seconds.')

masterMind()